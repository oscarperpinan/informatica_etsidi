#+TITLE: Tema 3: Sentencias de Control
#+DATE:
#+STARTUP: beamer
#+SETUPFILE: config.org
#+OPTIONS: H:3

* Introducción
*** Introducción
- Sin sentencias de control los programas se ejecutan de manera secuencial
**** Sentencias de Control
- Sentencias Condicionales :: ejecutan unas secuencias u otras según el cumplimiento de unas condiciones.
  - =if=, =if - else=
  - =switch - case=
- Sentencias Repetitivas :: repiten un conjunto de sentencias en unas determinadas condiciones.
  - =for=
  - =while=, =do - while=
* Sentencias Condicionales
** =if - else=
*** =if=
# #+BEGIN_SRC plantuml :file figs/if.pdf :tangle no
# scale 2
# start

# if (condicion) then (1)
#   :sentencia_A;
# else (0)
# endif
# :sentencia_B;

# stop
# #+END_SRC

#+ATTR_LATEX: :height 0.9\textheight
#+RESULTS:
[[file:figs/if.pdf]]

*** =if=
- Si se cumple =condicion= (su resultado es *diferente de 0*) se ejecuta la =sentencia_A=.
- *Siempre* se ejecuta la =sentencia_B=.
#+BEGIN_SRC C :tangle no
if (condicion)
    sentencia_A;
sentencia_B;
#+END_SRC
- Para ejecutar un conjunto de sentencias hay que agruparlas *entre llaves*.
#+BEGIN_SRC C :tangle no
if (condicion)
  {
    sentencia_A1;
    sentencia_A2;
    ...
  }
sentencia_B1;
sentencia_B2;
...
#+END_SRC

*** Ejemplo =if=

#+BEGIN_SRC C
# include <stdio.h>
int main ()
{
  int n;
  printf("Escribe un número entero\n");
  scanf("%d", &n);
  if (n % 2 == 0) // Condición
    {// Uso de llaves
      printf("Se cumple la condición: ");
      printf("El número %d es par.\n", n);      
    } // Fin de if
  printf("Gracias por participar.\n");
  return 0;
}
#+END_SRC

*** Ejemplo =if=

#+BEGIN_SRC C
# include <stdio.h>
int main ()
{
  int n;
  printf("Escribe un número entero\n");
  scanf("%d", &n);
  if (n % 2 == 0) // Sin llaves para sentencias simples
    printf("El número %d es par.\n", n);
  // Fin de if
  printf("Gracias por participar.\n");
  return 0;
}
#+END_SRC


*** Ejemplo =if=
#+BEGIN_SRC C
# include <stdio.h>
int main ()
{
  int n;
  printf("Escribe un número entero\n");
  scanf("%d", &n);
  if (n % 2) //Esta condición no es un booleano
    //La sentencia se ejecuta cuando la condición
    //*no* es igual a cero (n % 2 != 0)
    printf("El número %d es impar.\n", n);
  printf("Gracias por participar.\n");
  return 0;
}
#+END_SRC



*** =if - else=
# #+BEGIN_SRC plantuml :file figs/ifelse.pdf :tangle no
# scale 2
# start

# if (condicion) then (1)
#   :sentencia_A;
# else (0)
#   :sentencia_B;
# endif
# :sentencia_C;

# stop
# #+END_SRC

#+ATTR_LATEX: :height 0.9\textheight
#+RESULTS:
[[file:figs/ifelse.pdf]]


*** =if - else=
- =if= :: Si se cumple =condicion= (su resultado es *diferente de 0*) se ejecuta la =sentencia_A=.
- =else= :: En caso contrario se ejecuta la =sentencia_B=.
- Siempre :: se ejecuta la =sentencia_C=.
#+BEGIN_SRC C :tangle no
if (condicion)
    sentencia_A;
else
    sentencia_B;
sentencia_C;
#+END_SRC
*** =if - else=
- Para ejecutar un conjunto de sentencias hay que agruparlas *entre llaves*.
#+BEGIN_SRC C :tangle no
if (condicion)
  {
    sentencia_A1;
    sentencia_A2;
    ...
  }
else
  {
    sentencia_B1;
    sentencia_B2;
    ...    
  }
sentencia_C1;
sentencia_C2;
...
#+END_SRC


*** Ejemplo =if-else=
    :PROPERTIES:
    :beamer_opt: plain
    :END:

#+BEGIN_SRC C
# include <stdio.h>
int main (){
  int n;
  printf("Escribe un número entero\n");
  scanf("%d", &n);
  if (n % 2 == 0) // condicion
    { // Inicio de if 
      printf("Se cumple la condición: ");
      printf("El número %d es par.\n", n);      
    }
  else
    { // Inicio de else
      printf("No se cumple la condición: ");
      printf("El número %d es impar.\n", n);      
    } // Fin de if - else
  printf("Gracias por participar.\n");
  return 0;
}
#+END_SRC

*** Ejemplo =if-else=

#+BEGIN_SRC C
# include <stdio.h>
int main ()
{
  int n;
  printf("Escribe un número entero\n");
  scanf("%d", &n);
  if (n % 2 == 0)
    printf("El número %d es par.\n", n);
  else
    printf("El número %d es impar.\n", n);
  printf("Gracias por participar.\n");
  return 0;
}
#+END_SRC


*** =if - else - if=
# #+BEGIN_SRC plantuml :file figs/ifelseif.pdf :tangle no
# scale 2
# start

# if (condicion_1) then (1)
#   :sentencia_A;
# else (0)
#   if (condicion_2) then (1) 
#      :sentencia_B;
#   else (0)
#      :sentencia_C;
#   endif
# endif
# :sentencia_D;

# stop
# #+END_SRC

#+ATTR_LATEX: :height 0.9\textheight
#+RESULTS:
[[file:figs/ifelseif.pdf]]
*** =if - else - if=
- =if= :: Si se cumple =condicion_1= se ejecuta la =sentencia_A=.
- =else= :: En caso contrario ...
  - =if= :: si se cumple =condicion_2= se ejecuta la =sentencia_B=.
  - =else= :: En caso contrario se ejecuta =sentencia_C=.
- Siempre :: se ejecuta la =sentencia_D=.
#+BEGIN_SRC C :tangle no
if (condicion_1)
    sentencia_A;
else
  if (condicion_2)
    sentencia_B;
  else
    sentencia_C;
sentencia_D;
#+END_SRC


*** =if - else - if=
- =if= :: Si se cumple =condicion_1= se ejecuta la =sentencia_A=.
- =else if= :: En caso contrario, si se cumple =condicion_2= se ejecuta la =sentencia_B=.
  - =else= :: En caso contrario se ejecuta =sentencia_C=.
- Siempre :: se ejecuta la =sentencia_D=.
#+BEGIN_SRC C :tangle no
if (condicion_1)
    sentencia_A;
else if (condicion_2)
    sentencia_B;
else
   sentencia_C;
sentencia_D;
#+END_SRC

*** Ejemplo =if - else - if=
    :PROPERTIES:
    :beamer_opt: plain
    :END:

#+BEGIN_SRC C
#include <stdio.h>

int main(){
  int x;
  printf("Escribe un número: ");
  scanf("%i", &x);

  if (x < 0) 
    // se cumple la primera condición
    printf("El número es negativo.\n");
  else if (x == 0)
    // se cumple la segunda
    printf("El número es 0.\n");
  else
    // no se cumple ninguna
    printf("El número es positivo.\n");
  return 0;
}
#+END_SRC

** =switch - case=

*** =switch-case=
- Permite tomar una decisión múltiple dependiendo del valor *entero* de una expresión.
# #+BEGIN_SRC plantuml :file figs/switch.pdf :tangle no
# scale 2
# start
# if (val1) then ( )
#   :sentencia_1;
#   stop
# elseif (val2) then ( )
#   :sentencia_2;
#   stop
# elseif (val3) then ( )
#   :sentencia_3;
#   stop
# else (default)
#   :sentencia_n;
# endif
# stop
# #+END_SRC

#+ATTR_LATEX: :height 0.8\textheight
#+RESULTS:
[[file:figs/switch.pdf]]


*** =switch-case=
- Permite tomar una decisión múltiple dependiendo del valor *entero* de una expresión.
#+BEGIN_SRC C :tangle no
switch (expr)
  {
  case val1:
    sentencia_1;
    break;
  case val2:
    sentencia_2;
    break;
  case val3:
    sentencia_3;
    break;
  ...
  default:
    sentencia_n;
    break;
  }
#+END_SRC
*** Ejemplo de =switch - case=
    :PROPERTIES:
    :beamer_opt: plain
    :END:

#+BEGIN_SRC C
#include <stdio.h>
int main () {
  float v1, v2;
  char op;
  scanf("%f %c %f", &v1, &op, &v2);
  switch(op)
    {
    case '+':
      printf("%.2f\n", v1 + v2);
      break;
    case '-':
      printf("%.2f\n", v1 - v2);
      break;
    default:
      printf("No se hacer esa operación.\n");
      break;
    }
  return 0; 
}
#+END_SRC

*** Atención al uso de =break=
#+BEGIN_SRC C
#include <stdio.h>
int main ()
{
  float v1, v2;
  char op;
  scanf("%f %c %f", &v1, &op, &v2);
  switch(op)
    {
    case '+':
      printf("%.2f\n", v1 + v2);
    case '-':
      printf("%.2f\n", v1 - v2);
    default:
      printf("No se hacer esa operación.\n");
      break;
    }
  return 0;
}
#+END_SRC
*** Uso de llaves con =switch=
    :PROPERTIES:
    :beamer_opt: plain
    :END:
#+ATTR_LATEX: :options basicstyle=\ttfamily\footnotesize
#+BEGIN_SRC C
#include <stdio.h>
int main (){
  float v1, v2;
  char op;
  scanf("%f %c %f", &v1, &op, &v2);
  switch(op)
    {
    case '+':
      printf("Operación Suma:\n");
      printf("%.2f\n", v1 + v2);
      break;
    case '-':
      printf("Operación Resta:\n");
      printf("%.2f\n", v1 - v2);
      break;
    default:
      printf("No se hacer esa operación.\n");
      break;
    }
  return 0;
}
#+END_SRC
* Sentencias Repetitivas (Bucles)
** =for=

*** =for=: Flujo 
Ejecuta una sentencia (simple o compuesta) un número determinado de veces hasta que el resultado de una expresión sea falso.

# #+BEGIN_SRC plantuml :tangle no :file figs/for.pdf
# start

# :expr_inicio;

# while (expr_final) is (1)
#   :sentencia_1;
#   :sentencia_2;
#   :expr_avance;
# endwhile (0)

# stop
# #+END_SRC

#+ATTR_LATEX: :height 0.8\textheight
#+RESULTS:
[[file:figs/for.pdf]]

*** =for= : Código
Ejecuta una sentencia (simple o compuesta) un número determinado de veces hasta que el resultado de una expresión sea falso.

#+BEGIN_SRC C :tangle no
for (expr_inicio; expr_final; expr_avance)
  {
      sentencia_1;
      ...
  }
#+END_SRC

- =expr_inicio= :: Expresión de inicialización (se ejecuta una sola vez). Sirve para iniciar las variables de control del bucle.
- =expr_final= :: Expresión numérica, relacional o lógica. Si es falsa se acaba el bucle (si se omite, se considera siempre verdadera y, por tanto, bucle infinito).
- =expr_avance= :: Expresión (o expresiones separadas por comas) de progresión del bucle. 

*** Ejemplo: suma de enteros

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  // Todas las variables deben estar definidas
  // Asigno valor inicial 0 a suma
  int i, suma = 0, n = 10;

  for (i = 1; i <= n; i++)
    {
      suma += i;
    }
  printf("La suma de los %d primeros enteros es %d",
	 n, suma);
  return 0;
}
#+END_SRC

#+RESULTS:
: La suma de los 10 primeros enteros es 55

*** Ejemplo: factorial

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int i, n = 20;
  // El factorial alcanza valores grandes y siempre es positivo.
  unsigned long int fact;
  // La expresión de inicio puede ser múltiple,
  // separando por comas.
  // Aquí asigno valor inicial a fact
  for (i = 1, fact = 1; i <= n; i++)
      fact *= i;

  printf("El factorial de %d es %lu", 
	 n, fact);
  return 0;
}
#+END_SRC

#+RESULTS:
: El factorial de 20 es 2432902008176640000


*** Ejemplo: alfabeto

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  char i;
  // Se pueden usar char en las expresiones 
  for (i = 'a'; i <= 'z'; i++)
      printf("%c", i);
  return 0;
}
#+END_SRC

#+RESULTS:
: abcdefghijklmnopqrstuvwxyz


*** Ejemplo: bucles anidados

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int i, j;
  for (i = 1; i <= 10; i++)
    {//Atención al uso de las llaves
      printf("Tabla del %d\n", i);

      for (j = 1; j <= 10; j++)
	printf("%d x %d = %d\n",
	       i, j, i * j);
    }
  return 0;
}
#+END_SRC

** =while=

*** =while=: Flujo
Ejecuta una sentencia (simple o compuesta) *cero o más veces* dependiendo del resultado booleano de una expresión.

# #+BEGIN_SRC plantuml :tangle no :file figs/while.pdf
# start

# while (expresion) is (1)
#   :sentencia_1;
#   :sentencia_2;
# endwhile (0)

# stop
# #+END_SRC

#+ATTR_LATEX: :height 0.8\textheight
#+RESULTS:
[[file:figs/while.pdf]]

*** =while=: Código
Ejecuta una sentencia (simple o compuesta) *cero o más veces* dependiendo del resultado booleano de una expresión.
#+BEGIN_SRC C :tangle no
while (expresion)
  {
      sentencia_1;
      sentencia_2;
      ...
  }

#+END_SRC 

*** =while=: Atención

**** 
- Si la primera vez que se evalúa la condición es falsa, el bloque de sentencias *no se ejecuta nunca*.

- Si la expresión es siempre verdadera *el bucle es infinito* (dentro de la sentencia debe haber una instrucción que modifique su estado).

*** Ejemplo
#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int i;

  i = 5;
  while (i > 0)
    {
      printf("%d...", i);
      --i;
    }
  printf("Despegue!");
  return 0;
}
#+END_SRC

#+RESULTS:
: 5...4...3...2...1...Despegue!

** =do-while=

*** =do-while=: Flujo
Ejecuta una sentencia (simple o compuesta) *una o más veces* dependiendo del resultado de una expresión.

# #+BEGIN_SRC plantuml :tangle no :file figs/do_while.pdf
# start

# repeat
# :sentencia_1;
# :sentencia_2;
# repeat while(expresion) is (1)

# stop
# #+END_SRC

#+ATTR_LATEX: :height 0.8\textheight
#+RESULTS:
[[file:figs/do_while.pdf]]

*** =do-while=: Código
Ejecuta una sentencia (simple o compuesta) *una o más veces* dependiendo del resultado de una expresión.
#+BEGIN_SRC C :tangle no
do
{
  sentencia_1;
  sentencia_2;
  ...
}
while (expresion);
#+END_SRC


*** =do-while=: Atención

**** 
- Si la primera vez que se evalúa la expresión es falsa, la sentencia se habrá ejecutado al menos una vez.

- Si la expresión es siempre verdadera *el bucle es infinito* (dentro de la sentencia debe haber una instrucción que modifique su estado)

*** Ejemplo: número entero al revés
#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int num = 123456, cifra;

  do
    {
      cifra = num % 10;
      printf("%d", cifra);
      num = num / 10;
    }
  while (num > 0);
  printf("\n");
  return 0;
}
#+END_SRC

#+RESULTS:
: 654321


** Equivalencia

*** Equivalencia
    :PROPERTIES:
    :beamer_opt: plain
    :END:
#+ATTR_LATEX: :options basicstyle=\ttfamily\footnotesize
#+BEGIN_SRC C
#include <stdio.h>
int main() {
  int i,n = 10;
  // Bucle for
  for (i = 0; i <= n; i++)
      printf("%d ",i);
  // Bucle while
  i=0;
  while( i<= n) {
      printf("%d ",i);
      i++;
    }
  // Bucle do-while
  i=0;
  do {
      printf("%d ",i);
      i++;
    }
  while(i <= n);
  return 0;
}
#+END_SRC
*** ¿Qué bucle elegir?
- Si se conoce el número de veces que debe ejecutarse la tarea es recomendable usar =for=.
- Si el número de veces es desconocido a priori:
  - Si debe realizarse al menos una vez se debe usar =do-while=.
  - Si no es imprescindible que se ejecute alguna vez, se puede usar =while=.
* Rupturas
*** =break= y =continue=
**** =break=
- Finaliza la ejecución de un bucle (si el bucle está anidado sólo finaliza él, pero no los bucles más externos).

**** =continue=
- Ejecuta la siguiente iteración del bucle.
- En un bucle =while= o =do-while= vuelve a =expresion=.
- En un bucle =for= ejecuta =expr_avance= y a continuación comprueba =expr_final=



# Local Variables:
# ispell-local-dictionary: "spanish"
# End:

